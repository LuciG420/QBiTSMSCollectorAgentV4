



  Future<TokenData> login() async {
    try {
      // 1.  Authorize
      final AuthorizationRequest request = AuthorizationRequest(
        AUTH0_CLIENT_ID,
        AUTH0_REDIRECT_URI,
        issuer: AUTH0_ISSUER,
        scopes: ['openid', 'profile', 'offline_access', 'read:messages'], // Add scopes as needed.  'offline_access' is required for refresh tokens.
        promptValues: ['login'], // Ensure a fresh login
        additionalParameters: {'audience': AUTH0_AUDIENCE},
      );

      final AuthorizationResponse? authorizationResponse =
          await _appAuth.authorize(request);

      if (authorizationResponse != null) {
        // 2. Exchange code for tokens
        final TokenResponse? tokenResponse = await _appAuth.token(TokenRequest(
          AUTH0_CLIENT_ID,
          AUTH0_REDIRECT_URI,
          authorizationCode: authorizationResponse.authorizationCode,
          issuer: AUTH0_ISSUER,
          grantType: 'authorization_code',
          additionalParameters: {'audience': AUTH0_AUDIENCE},
        ));

        if (tokenResponse != null) {
          await _secureStorage.write(
              key: REFRESH_TOKEN_KEY, value: tokenResponse.refreshToken);

          return TokenData(tokenResponse.accessToken!, tokenResponse.idToken!);
        } else {
          throw Exception('Login failed: Token exchange failed.');
        }
      } else {
        throw Exception('Login failed: No authorization response.');
      }
    } catch (e) {
      print('Login error: $e');
      rethrow;
    }
  }

  Future<TokenData> refreshTokenGrant(String refreshToken) async {
    try {
      final TokenResponse? result = await _appAuth.token(TokenRequest(
        AUTH0_CLIENT_ID,
        AUTH0_REDIRECT_URI,
        issuer: AUTH0_ISSUER,
        refreshToken: refreshToken,
        grantType: 'refresh_token',
        additionalParameters: {'audience': AUTH0_AUDIENCE},
      ));

      if (result != null) {
        // Update the refresh token, as Auth0 may rotate them
        await _secureStorage.write(
            key: REFRESH_TOKEN_KEY, value: result.refreshToken);
        return TokenData(result.accessToken!, result.idToken!);
      } else {
        throw Exception('Refresh token grant failed: No result returned.');
      }
    } catch (e) {
      print('Refresh token grant error: $e');
      await logout(); // Clear credentials on refresh failure
      rethrow;
    }
  }

  Future<void> logout() async {
    try {
      await _appAuth.endSession(EndSessionRequest(
        idTokenHint: JwtDecoder.decode(await _secureStorage.read(key: 'id_token') ?? '')['sub'], // User's ID from ID token
        postLogoutRedirectUrl: AUTH0_REDIRECT_URI,
        issuer: AUTH0_ISSUER,
      ));
      await _secureStorage.deleteAll();
    } catch (e) {
      print('Logout error: $e');
    }
  }

  Future<Map<String, dynamic>> getUserProfile(String accessToken) async {
    //Use the JWT library to extract information from the token,
    // or use the Auth0 /userinfo endpoint
    Map<String, dynamic> decodedToken = JwtDecoder.decode(accessToken);
    return decodedToken;
  }
}

class TokenData {
  final String accessToken;
  final String idToken;

  TokenData(this.accessToken, this.idToken);
}